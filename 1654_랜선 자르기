//최대 랜선 길이를 기준으로 이분탐색을 한다.
//랜선 길이(mid)로 취할 수 있는 랜선의 개수를 비교하여(getLength 이용) n의 값과 비교한다.
//n보다 클 경우, 임의의 랜선의 길이를 크게 잡아야 한다.(랜선의 개수 >=n 과 같아야 한다.)
//mid가 이 전의 값보다 클 경우 answer에 mid값으로 업데이트 한다.
//n보다 작을 경우, 랜선의 길이를 길게 잡아야 한다. (right = mid-1)

#include <iostream>
#include <vector>
using namespace std;
vector <long long> lensun;
int k, n;

long long getLength(long long mid){
    long long sum = 0;
    for(int i = 0 ; i<k; i++){
        sum += lensun[i]/mid;
    }
    return sum;
}

long long binarySearch(long long left, long long right){
    long long result = 0;
    while(left<=right){
        long long mid = (left+right)/2;
        long long tmp = getLength(mid);
        
        if(tmp>=n){
            if(mid>result) result = mid;
            left = mid+1;
        }else{
            right = mid-1;
        }
    }
    
    return result;
}

int main(){
    long long max=0;
    scanf("%d %d", &k, &n);
    
    for(int i = 0 ; i<k ; i++){
        long long l;
        scanf("%lld", &l);
        lensun.push_back(l);
        if(max<l) max = l;
    }
    long long answer = binarySearch(1, max);
    printf("%lld", answer);
    return 0;
}
