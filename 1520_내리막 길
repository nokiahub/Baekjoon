//다이나믹 프로그래밍을 이용하여 최적화
//한 번 갔던 지점이 끝 점에 도달 할 수 있으면 끝까지 탐색하지 않고 리턴

#include <iostream>
#include <cstring>
#define MAX_S 500
using namespace std;

int n, m, arr[MAX_S][MAX_S], dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}, ways = 0;
bool visited[MAX_S][MAX_S];
int memo[MAX_S][MAX_S];

int dfs(int x, int y){
    if(x == m - 1 && y == n - 1){
        ways++;
        return 1;
    }
    
    int &ret = memo[x][y];
    if(ret != -1) return ret;
    
    ret = 0;
    
    for(int i = 0 ; i < 4 ; i++){
        int nx = x + dx[i];
        int ny = y + dy[i];
        
        if(nx >= 0 && ny >= 0 && nx < m && ny < n){
            if(!visited[nx][ny] && arr[x][y] > arr[nx][ny]){
                visited[nx][ny] = true;
                ret += dfs(nx, ny);
                visited[nx][ny] = false;
            }
        }
    }
    
    return ret;
}

int main(){
    cin >> m >> n;
    for(int i = 0 ; i < m ; i++){
        for(int j = 0 ; j < n ; j++){
            cin >> arr[i][j];
        }
    }
    memset(memo, -1, sizeof(memo));
    visited[0][0] = true;
    ways = dfs(0, 0);
    cout << ways;
    
    return 0;
}
