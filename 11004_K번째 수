// 0<n<5000001 이기 때문에 O(n)만에 k번째 수를 찾아야 한다.
// 최소 힙을 사용하면 수를 전부 삽입하는데 O(n)
// 오름차순 정렬 시, k번째 수를 찾는데 O(k) (k<=n)이므로 최대 O(2*n)시간복잡도만에 k번째 수를 구한다.

#include <iostream>
using namespace std;
int heap[5000001];
int heap_count = 0;

void swap(int *x, int *y){
    int tmp = *x;
    *x = *y;
    *y = tmp;
    return;
}

void push(int x){
    heap[++heap_count] = x;
    
    int child = heap_count;
    int parent = child/2;
    
    while(child>1 && heap[child]<heap[parent]){
        swap(&heap[child], &heap[parent]);
        child = parent;
        parent = child/2;
    }
    return;
}

void pop(){
    swap(&heap[1], &heap[heap_count]);
    --heap_count;
    
    int parent = 1;
    int child = parent*2;
    
    if(child+1<=heap_count)
        child = (heap[child]<heap[child+1]) ? child : child+1;
    
    while(child<=heap_count && heap[child]<heap[parent]){
        swap(&heap[child], &heap[parent]);
        parent = child;
        child = parent*2;
        
        if(child+1<=heap_count)
        child = (heap[child]<heap[child+1]) ? child : child+1;
    }
    return;
}

int main(){
    int n, k;
    scanf("%d %d", &n, &k);
    
    for(int i = 0 ; i<n ; i++){
        int num;
        scanf("%d", &num);
        push(num);
    }
    for(int i = 0 ; i<k-1 ; i++){
        pop();
    }
    printf("%d", heap[1]);
    
    return 0;
}
