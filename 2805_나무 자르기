//long long  범위 ( –9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 )
//문제 조건에 높이는 1,000,000,000보다 작거나 같은 양의 정수 또는 0, 나무 갯수는 1000,000개 까지 존재할 수 있기 때문에 변수로 long long을 써야 한다.
//자르는 높이를 기준으로 이분탐색을 한다.
//잘리는 양이 m보다 같거나 커야한다.  
//mid(임시 나무높이)가 클수록 적은 양의 나무가 잘리기 때문에(잘리는 양 최소화 해야 함) 미리 저장한 값 answer와 비교하여 mid가 더 큰 값을 가질 때 answer값을 업데이트 한다.
//잘리는 양이 m보다 작을 수 없다.


#include <iostream>
#include <vector>
using namespace std;

vector <long long> tree;
long long n, m;

long long getHeight(long long height){
    long long sum = 0;
    for(int i = 0 ;i < n ; i++){
        if(tree[i]>height) sum = sum + (tree[i]-height);
    }
    return sum;
}

long long binarySearch(int left, int right){
    
    long long result = 0;
    
    while(left <= right){
        long long mid = (left+right)/2;
        long long tmp = 0;
        tmp = getHeight(mid);
        
        if(tmp>=m){
            if(result<mid) result = mid;
            left = mid+1;
        }else{
            right = mid-1;
        }
    }
    return result;
}

int main(){
    long long max = 0;
    scanf("%lld %lld", &n, &m);
    for(int i = 0 ; i<n ; i++){
        int h;
        cin >> h;
        tree.push_back(h);
        if(h>max) max = h;
    }
    
    long long answer = binarySearch(0, max);
    printf("%lld", answer);
    return 0;
}
