//동서남북 방향의 경우 dx={-1, 0, 1, 0}, dy={0,1,0,-1}로 지정해서 풀이할 수 있음
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;
int map[25][25];
bool visited[25][25];
int n, cnt, total=0;
void dfs(int i, int j) {
	if (visited[i][j]) return ;
	visited[i][j] = true;
	cnt++;
	if (i - 1>= 0 && map[i - 1][j] == 1) dfs(i - 1, j);
	if (j + 1 < n && map[i][j + 1] == 1) dfs(i, j + 1);
	if (i + 1 < n && map[i + 1][j] == 1) dfs(i + 1, j);
	if (j - 1 >= 0 && map[i][j - 1] == 1) dfs(i, j - 1);
}
int main() {
	cin >> n;
	vector <int> answer;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < n; j++) {
			map[i][j] = s[j] - '0';
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (visited[i][j] == false && map[i][j] == 1) {
				cnt = 0;
				dfs(i, j);
				total++;
				answer.push_back(cnt);
			}
		}
	}
	cout << total << '\n';
	sort(answer.begin(), answer.end());
	for (int i = 0; i < answer.size(); i++) cout << answer[i] << '\n';
	return 0;
}
