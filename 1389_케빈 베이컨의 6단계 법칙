//bfs로 순회하여 도달할때까지 각각 노드별로 step을 구하여 모두 더한 값을 return한다
//return한 값이 가장 작은 node의 index를 출력한다.
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int n, m, k[101];
vector <int> v[101];
bool visited[101];
int bfs(int start) {
	queue <int> q;
	q.push(start);
	k[start] = 0;
	visited[start] = true;
	while (!q.empty()) {
		int node = q.front();
		q.pop();
		for (int i = 0; i < v[node].size(); i++) {
			int next = v[node][i];
			if (visited[next])continue;
			visited[next] = true;
			q.push(next);
			k[next] = k[node] + 1;
		}
		if (q.empty()) {
			int sum = 0;
			for (int i = 1; i <= n; i++) {
				sum += k[i];
			}
			return sum;
		}
	}
}
void init() {
	for (int i = 0; i <= n; i++) visited[i] = false;
}
int main() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	int min = bfs(1), index = 1;
	for (int i = 2; i <= n; i++) {
		init();
		int step = bfs(i);
		if (step < min) { min = step; index = i; }	
	}
	cout << index;
	return 0;
}
