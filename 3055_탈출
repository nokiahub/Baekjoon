//bfs를 수행할 때, depth가 같은 모든 노드들은 물의 넓이가 모두 똑같이 처리해야 한다.
//depth가 달라질 때마다 물의 영역을 넓힘(q에서 pop 할때마다 영역 넓히는게 아님)
//bfs 수행 시, 항상 지나간 자리 visited true처리 해주어야 함(메모리 초과 문제 해결)

#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

int r, c, start_x, start_y, dest_x, dest_y, answer = -1, progress = 0, water_progress = 0;
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}, dist[50][50], water_dist[50][50];
char map[50][50];
bool visited[50][50];
queue <pair<int, int>> water;

void expand_water(){
    while(!water.empty()){
        int cur_x = water.front().first;
        int cur_y = water.front().second;
        
        if(water_progress + 1 == water_dist[cur_x][cur_y]){
            water_progress = water_progress + 1;
            return;
        }
        
        water.pop();
        
        for(int i = 0; i < 4; i++){
            int nx = cur_x + dx[i];
            int ny = cur_y + dy[i];
            
            if(nx >= 0 && nx < r && ny >= 0 && ny < c){
                if(map[nx][ny] == '.'){
                    water.push(make_pair(nx, ny));
                    water_dist[nx][ny] = water_dist[cur_x][cur_y] + 1;
                    map[nx][ny] = '*';
                }
            }
        }
        
    }
    
    return;
}

void bfs(int x, int y){
    queue <pair<int, int>> q;
    q.push(make_pair(x, y));
    visited[x][y] = true;
    expand_water();
    
    
    while(!q.empty()){
        int cur_x = q.front().first;
        int cur_y = q.front().second;
        q.pop();
        
        if(map[cur_x][cur_y] == 'D' && answer == -1){
            answer = dist[cur_x][cur_y];
            return;
        }
        
        if(progress + 1 == dist[cur_x][cur_y]){
            expand_water();
            progress = progress + 1;
        }
        
        for(int i = 0; i < 4; i++){
            int nx = cur_x + dx[i];
            int ny = cur_y + dy[i];
            
            if(nx >= 0 && nx < r && ny >= 0 && ny < c){
                if((map[nx][ny] == '.' || map[nx][ny] =='D') && !visited[nx][ny]){
                    q.push(make_pair(nx, ny));
                    dist[nx][ny] = dist[cur_x][cur_y] + 1;
                    visited[nx][ny] = true;
                }
            }
        }
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> r >> c;
    for(int i = 0; i < r; i++){
        for(int j = 0; j < c; j++){
            cin >> map[i][j];
            if(map[i][j] == 'S'){
                start_x = i;
                start_y = j;
            }else if(map[i][j] == 'D'){
                dest_x = i;
                dest_y = j;
            }else if(map[i][j] == '*'){
                water.push(make_pair(i, j));
            }
        }
    }
    
    bfs(start_x, start_y);
    if(answer == -1){
        cout << "KAKTUS";
    }else{
        cout << answer;
    }
    
    return 0;
}
