// disjoint-set과 kruskal 알고리즘 사용
// connected graph가 되려면 edge가 꼭 v-1 개 필요함

#include <iostream>
#include <queue>
using namespace std;

struct Edge{
    int from;
    int to;
    int value;
};
struct compare{
    bool operator()(Edge &a, Edge &b){
        return a.value > b.value;
    }
};
priority_queue<Edge, vector<Edge>, compare> pq;
int parent[10001], treerank[10001], v, e;

int getParent(int x){
    if(parent[x] == x) return x;
    return parent[x] = getParent(parent[x]);
}

void Union(int a, int b){
    a = getParent(a);
    b = getParent(b);
    if(treerank[a] > treerank[b]){
        parent[b] = a;
    }else{
        parent[a] = b;
    }
    if(treerank[a] == treerank[b]){
        treerank[b]++;
    }
}

int main(){
    cin >> v >> e;
    for(int i = 0 ; i<e ; i++){
        int a, b, c;
        cin >> a >> b >> c;
        Edge edg;
        edg.from = a; edg.to = b; edg.value = c;
        pq.push(edg);
    }
    for(int i = 1; i<=v ; i++){
        parent[i] = i;
        treerank[i] = 0;
    }
    long long answer = 0;
    int cnt = 0;
    while(cnt < v-1){
        Edge tmp = pq.top();
        int a = tmp.from, b = tmp.to;
        if(getParent(a) != getParent(b)){
            answer += tmp.value;
            Union(a, b);
            cnt++;
        }
        pq.pop();
    }
    cout << answer;
    return 0;
}
