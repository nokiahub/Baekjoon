#include <iostream>
#include <queue>
using namespace std;
int n, m, answer=0;
int map[50][50], visited[50][50];
int leftx[4] = {0, -1, 0, 1}, lefty[4] = {-1, 0, 1, 0};
int backx[4] = {1, 0, -1, 0}, backy[4] = {0, -1, 0, 1};

int getDir(int dir){
    int newDir = dir-1;
    if(newDir==-1) newDir = 3;
    return newDir;
}
void bfs(int x, int y, int dir){
    queue<pair<int, int>> q;
    visited[x][y] = 1;
    q.push(pair<int, int>(x, y));
    int d = dir;
    
    while(!q.empty()){
        pair<int, int> node = q.front();
        q.pop();
        if(visited[node.first][node.second]==1) answer++;
        int i, nx, ny;
        for(i = 0 ; i<4; i++){
            nx = node.first + leftx[d];
            ny = node.second +lefty[d];
            
            if(nx>=0 && nx<n && ny>=0 && ny<m){
                if(visited[nx][ny]==0 && map[nx][ny]==0){
                    q.push(pair<int, int>(nx, ny));
                    visited[nx][ny] += 1;
                    d = getDir(d);
                    break;
                }
                d = getDir(d);
            }
        }
        if(i==4){
            nx = node.first + backx[d];
            ny = node.second +backy[d];
            if(nx>=0 && nx<n && ny>=0 && ny<m){
                if(map[nx][ny]==0){
                    q.push(pair<int, int>(nx, ny));
                    visited[nx][ny] += 1;
                }
            }
        }
    }
    return;
}
int main(){
    scanf("%d %d", &n, &m);
    int x, y, dir;
    scanf("%d %d %d", &x, &y, &dir);
    
    for(int i = 0 ; i<n ; i++){
        for(int j = 0 ; j<m ; j++){
            scanf("%d", &map[i][j]);
        }
    }
    bfs(x, y, dir);
    printf("%d", answer);
    return 0;
}

