#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
int map[100][100];
int visited[100][100];
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
int m, n, k, cnt = 0;

int bfs(int x, int y){
    int ret = 0;
    queue <pair<int, int>> q;
    q.push(make_pair(x, y));
    visited[x][y] = true;
    
    while(!q.empty()){
        pair <int, int> node = q.front();
        q.pop();
        ret += 1;
        
        for(int i = 0 ; i<4 ; i++){
            int nx = node.first +dx[i];
            int ny = node.second +dy[i];
            if(nx>=0 && nx<m && ny >=0 && ny<n)
            if(map[nx][ny]==0 && !visited[nx][ny]){
                visited[nx][ny] = true;
                q.push(make_pair(nx, ny));
            }
        }
    }
    return ret;
    
}
int main(){

    vector <int> ans;
    scanf("%d %d %d", &m, &n, &k);
    
    for(int i = 0 ; i<k ; i++){
        int x1, y1, x2, y2;
        scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
        
        for(int p = y1 ; p<y2 ; p++){
            for(int q = x1 ; q<x2 ; q++){
                map[p][q] = 1;
            }
        }
    }
    for(int i = 0 ; i<m ; i++){
        for(int j = 0 ; j<n ; j++){
            if(map[i][j]==0 && !visited[i][j]){
                cnt += 1;
                ans.push_back(bfs(i, j));
            }
        }
    }
    printf("%d\n", cnt);
    sort(ans.begin(), ans.end());
    for(int i = 0 ; i<ans.size(); i++)
        printf("%d ", ans[i]);
    return 0;
}

