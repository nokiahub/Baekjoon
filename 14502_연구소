#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int n, m, map[8][8], answer = 0;
vector <pair<int, int>> space;
int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0 , 1, 0};
bool check[8][8];

int getSpace(){
    int tm[8][8];
    for(int i = 0; i<n ; i++){
        for(int j = 0 ; j<m ; j++){
            if(check[i][j]) tm[i][j] = 1;
            else tm[i][j] = map[i][j];
        }
    }
    int ret=0;
    bool visited[8][8];
    
    for(int e = 0 ; e < n ; e++)
        for(int w = 0 ; w < m ; w++)
            visited[e][w] = false;
  
    
    for(int i = 0; i<n ; i++){
        for(int j = 0 ; j<m ; j++){
            
            if(tm[i][j]==0 && !visited[i][j]){
                int tmp = 0;
                bool flag=false;
                
                queue <pair <int, int>> q;
                q.push(pair <int, int>(i, j));
                visited[i][j] = true;
                
                while(!q.empty()){
                    pair<int ,int> front = q.front();
                    q.pop(); tmp += 1;
                                  
                    for(int k = 0 ; k<4 ; k++){
                        int nx = front.first + dx[k];
                        int ny = front.second + dy[k];
                        
                        if(nx>=0 && nx<n && ny>=0 && ny<m){
                            if(!visited[nx][ny]){
                                if(tm[nx][ny]==2) flag = true;
                                
                                if(tm[nx][ny]!=1){
                                    q.push(pair <int, int>(nx, ny));
                                    visited[nx][ny] = true;
                                }
                            }
                        }
                    }
                }
                
                if(!flag) ret += tmp;
            }
        }
    }
    return ret;
}
void go(int index, int selected, int k){
    
    if(selected == k){
        
        int local = getSpace();
        if(local>answer) answer = local;
        return;
    }
    if(index >= space.size()) return;
    int x = space[index].first;
    int y = space[index].second;
    check[x][y] = true;
    go(index+1, selected+1, k);
    check[x][y] = false;
    go(index+1, selected, k);
    
    return;
}
int main(){
    cin >> n >> m;
    for(int i = 0 ; i< n ; i++){
        for(int j = 0 ; j<m ; j++){
            int num;
            cin >> num;
            if(num==0) space.push_back(pair<int, int>(i, j));
            map[i][j] = num;
        }
    }
    go(0, 0, 3);
    cout << answer ;
    return 0;
}
