#include <iostream>
#include <vector>
#define BOARD 20
#define TRY 5
using namespace std;
int n,arrow[TRY], dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1},
    board[BOARD][BOARD], answer = 0;

void move_board(){
    int tilt[BOARD][BOARD];
    int trial = 4;
    for(int i = 0 ; i<n ; i++)
        for(int j = 0 ; j<n ; j++)
            tilt[i][j] = board[i][j];
    
    int index;
    while(trial>=0){
        int move = arrow[trial];
        if(move==0){
            for(int i = 0 ; i<n ; i++){
                for(int j = 0 ; j<n ; j++){
                    index = 0;
                    if(tilt[j][i] > 0){
                        int k = j;
                        while(k-1>=0 && tilt[k-1][i]==0){
                            index++;
                            k--;
                        }
                        if(index){
                            tilt[j-index][i] = tilt[j][i];
                            tilt[j][i] = 0;
                        }
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = 0 ; j<n ; j++){
                    if(j+1<=n-1 && tilt[j][i]>0 && tilt[j][i] == tilt[j+1][i]){
                        tilt[j][i] = 2*tilt[j][i];
                        tilt[j+1][i] = 0;
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = 0 ; j<n ; j++){
                    index = 0;
                    if(tilt[j][i] > 0){
                        int k = j;
                        while(k-1>=0 && tilt[k-1][i]==0){
                            index++;
                            k--;
                        }
                        if(index){
                            tilt[j-index][i] = tilt[j][i];
                            tilt[j][i] = 0;
                        }
                    }
                }
            }
        }else if(move==1){
            for(int i = 0 ; i<n ; i++){
                for(int j = n-1 ; j>=0 ; j--){
                    index = 0;
                    if(tilt[i][j] > 0){
                        int k = j;
                        while(k+1<n && tilt[i][k+1]==0){
                            index++;
                            k++;
                        }
                        if(index){
                            tilt[i][j+index] = tilt[i][j];
                            tilt[i][j] = 0;
                        }
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = n-1 ; j>=0 ; j--){
                    if(j-1>=0 && tilt[i][j]>0 && tilt[i][j] == tilt[i][j-1]){
                        tilt[i][j] = 2*tilt[i][j];
                        tilt[i][j-1] = 0;
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = n-1 ; j>=0 ; j--){
                    index = 0;
                    if(tilt[i][j] > 0){
                        int k = j;
                        while(k+1<n && tilt[i][k+1]==0){
                            index++;
                            k++;
                        }
                        if(index){
                            tilt[i][j+index] = tilt[i][j];
                            tilt[i][j] = 0;
                        }
                    }
                }
            }
        }else if(move==2){
            for(int i = 0 ; i<n ; i++){
                for(int j = n-1 ; j>=0 ; j--){
                    index = 0;
                    if(tilt[j][i]>0){
                        int k = j;
                        while(k+1<n && tilt[k+1][i]==0){
                            index++;
                            k++;
                        }
                        if(index){
                            tilt[j+index][i] = tilt[j][i];
                            tilt[j][i] = 0;
                        }
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = n-1 ; j>=0 ; j--){
                    if(j-1>=0 && tilt[j][i]>0 && tilt[j][i] == tilt[j-1][i]){
                        tilt[j][i] = 2*tilt[j][i];
                        tilt[j-1][i] = 0;
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = n-1 ; j>=0 ; j--){
                    index = 0;
                    if(tilt[j][i]>0){
                        int k = j;
                        while(k+1<n && tilt[k+1][i]==0){
                            index++;
                            k++;
                        }
                        if(index){
                            tilt[j+index][i] = tilt[j][i];
                            tilt[j][i] = 0;
                        }
                    }
                }
            }
        }else if(move==3){
            for(int i = 0 ; i<n ; i++){
                for(int j = 0 ; j<n ; j++){
                    index = 0;
                    if(tilt[i][j]>0){
                        int k = j;
                        while(k-1>=0 && tilt[i][k-1]==0){
                            index++;
                            k--;
                        }
                        if(index){
                            tilt[i][j-index] = tilt[i][j];
                            tilt[i][j] = 0;
                        }
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = 0 ; j<n ; j++){
                    if(j+1<n && tilt[i][j]>0 && tilt[i][j] == tilt[i][j+1]){
                        tilt[i][j] = 2*tilt[i][j];
                        tilt[i][j+1] = 0;
                    }
                }
            }
            for(int i = 0 ; i<n ; i++){
                for(int j = 0 ; j<n ; j++){
                    index = 0;
                    if(tilt[i][j]>0){
                        int k = j;
                        while(k-1>=0 && tilt[i][k-1]==0){
                            index++;
                            k--;
                        }
                        if(index){
                            tilt[i][j-index] = tilt[i][j];
                            tilt[i][j] = 0;
                        }
                    }
                }
            }
        }
        trial--;
    }
    for(int i = 0 ; i<n ; i++){
        for(int j = 0 ; j<n ; j++){
            answer = max(answer, tilt[i][j]);
        }
    }
    return;
}
void go(int index, int k){
    if(index == k){
        move_board();
        return;
    }
    for(int i = 0 ; i<4 ; i++){
        arrow[index] = i;
        go(index+1, k);
    }
    return;
}
int main(){
    cin >> n;
    for(int i = 0 ; i<n ; i++)
        for(int j = 0 ; j<n ; j++)
            cin >> board[i][j];
    go(0, TRY);
    cout << answer;
    return 0;
}
